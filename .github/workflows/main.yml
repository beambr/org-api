name: Deploy Organization API Lambdas
on:
  push:
    branches:
    - main
    - stage
    - dev
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python Runtime
      uses: actions/setup-python@v3
      with:
        python-version: "3.9"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

  test:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python Runtime
      uses: actions/setup-python@v3
      with:
        python-version: "3.9"
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}
    - name: Set Environment Variables
      run: |
        echo "STAGE=${GITHUB_REF##*/}" >> $GITHUB_ENV
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install boto3
        pip install coverage
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Run Unit Tests
      run: |
        python -m coverage run -m unittest discover -v -s ./test/unittest -p *test.py
        python -m coverage report --fail-under=95

  deploy:
    needs: test
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set Environment Variables
      run: |
        echo "STAGE=${GITHUB_REF##*/}" >> $GITHUB_ENV
        if [ ${GITHUB_REF##*/} == "stage" ]; then echo "TYPEFORM_URL=${{ vars.TYPEFORM_URL_STAGE }}" >> $GITHUB_ENV; fi
        if [ ${GITHUB_REF##*/} == "main" ]; then echo "TYPEFORM_URL=${{ vars.TYPEFORM_URL_MAIN }}" >> $GITHUB_ENV; fi
    - name: Print Variables
      run: |
        echo "Region ${{ vars.AWS_REGION }} Stage $STAGE Typeform URL ${{ env.TYPEFORM_URL }}"
    - name: Install plugin and deploy
      uses: serverless/github-action@v3
      with:
        args: -c "serverless plugin install --name serverless-python-requirements && serverless deploy --region ${{ vars.AWS_REGION }} --stage ${{ env.STAGE }} --param='typeform_url=${{ env.TYPEFORM_URL }}'"
        entrypoint: /bin/sh
      env:
        SERVERLESS_ACCESS_KEY: ${{ secrets.SERVERLESS_ACCESS_KEY }}